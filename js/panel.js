// js/panel.js
// This script manages the functionality of the WebInsight browser extension's side panel.
// It handles:
// - Displaying saved content items (pages, selections, screenshots, PDFs, generated analyses).
// - User interactions for saving new content (current page, selection, PDF, screenshots).
// - Filtering displayed content by tags.
// - Expanding items to show details, including AI analysis results for screenshots.
// - Adding and removing tags from content items.
// - Initiating key points generation and PDF report generation for filtered tag sets.
// - Managing UI for local AI features (initialization, embedding generation, tag suggestions).
// - Applying themes based on user settings and system preferences.
// - Communicating with the background script (background.js) for all data operations and AI tasks.

// --- Constants ---
/**
 * Type identifier for content items that are generated by AI analysis (e.g., key points).
 * This should match the constant defined in `background.js`.
 * @type {string}
 */
const GENERATED_ITEM_TYPE = "generated_analysis";

// --- DOM Element References ---
// These variables store references to key HTML elements in panel.html,
// allowing the script to interact with and update the panel's UI.

// Main container for displaying content items.
const panelContentListEl = document.getElementById('panelContentList');
// Element for showing status messages (success, error, info) to the user.
const panelStatusMessageEl = document.getElementById('panelStatusMessage');
// Button to open the extension's options page.
const panelOptionsBtn = document.getElementById('panelOptionsBtn');
// Buttons for various content saving actions.
const panelSavePageBtn = document.getElementById('panelSavePageBtn');
const panelSavePageAsPDFBtn = document.getElementById('panelSavePageAsPDFBtn');
const panelSaveSelectionBtn = document.getElementById('panelSaveSelectionBtn');
const panelCaptureVisibleBtn = document.getElementById('panelCaptureVisibleBtn');
const panelCaptureAreaBtn = document.getElementById('panelCaptureAreaBtn');
// Elements related to tag-based filtering.
const tagFilterListEl = document.getElementById('tagFilterList'); // Container for filter tag buttons.
const clearTagFilterBtn = document.getElementById('clearTagFilterBtn'); // Button to clear active tag filter.
// Buttons for advanced features based on filtered tags.
const getKeyPointsBtn = document.getElementById('getKeyPointsBtn'); // Button to generate key points for current filter.
const generateReportBtn = document.getElementById('generateReportBtn'); // Button to generate a PDF report.
// Display area for key points results.
const keyPointsResultDisplayArea = document.getElementById('keyPointsResultDisplay');
// Elements related to Local AI feature management.
const aiStatusIndicator = document.getElementById('aiStatusIndicator'); // Displays status of local AI.
const initializeAIBtn = document.getElementById('initializeAIBtn'); // Button to initialize local AI.
const generateEmbeddingsBtn = document.getElementById('generateEmbeddingsBtn'); // Button to generate embeddings for tags.


// --- State Variables ---
/**
 * Stores the ID of the currently active tag filter.
 * `null` if no filter is active.
 * @type {number | null}
 */
let currentFilterTagId = null;
/**
 * Stores the name of the currently active tag filter.
 * Used for display purposes (e.g., on buttons). `null` if no filter.
 * @type {string | null}
 */
let currentFilterTagName = null;
/**
 * Cache for the most recently fetched list of content items.
 * Used to avoid re-fetching when only displaying details or for internal operations.
 * @type {Array<object>}
 */
let currentItemsCache = [];
/**
 * Flag indicating whether the local AI system has been initialized by the user.
 * @type {boolean}
 */
let aiInitialized = false;
/**
 * Flag indicating if the local AI system is currently in the process of initializing.
 * @type {boolean}
 */
let aiLoading = false;


// Expose currentItemsCache to the window for debugging purposes.
// This allows developers to inspect the cache from the browser's developer console.
window.currentItemsCache = currentItemsCache;

// --- Initialization ---
/**
 * Sets up the panel when the DOM is fully loaded.
 * This includes applying the theme, loading initial data (tags and content),
 * attaching event listeners to UI elements, and checking the local AI status.
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log("WebInsight Panel: DOM content fully loaded and parsed.");
    applyPanelTheme(); // Apply visual theme (light/dark).
    loadFilterTags();  // Fetch and display available tags for filtering.
    loadSavedContent(); // Fetch and display all saved content items initially.
    addEventListeners(); // Attach event listeners to buttons and interactive elements.
    checkAIStatus();     // Check and display the current status of the local AI.
});

// --- Event Listener Setup ---
/**
 * Adds event listeners to all static interactive elements in the panel.
 * This function is called once during initialization.
 * Event listeners for dynamically created elements (like delete buttons for items or tags)
 * are added when those elements are created (see event delegation for item list).
 */
function addEventListeners() {
    // Listener for the "Options" button to open the extension's options page.
    if (panelOptionsBtn) {
        panelOptionsBtn.addEventListener('click', () => chrome.runtime.openOptionsPage());
    } else {
        console.warn("WebInsight Panel: Options button (panelOptionsBtn) not found in DOM.");
    }

    // Listeners for content saving action buttons.
    // Each button sends a message to the background script to perform the respective action.
    if (panelSavePageBtn) {
        panelSavePageBtn.addEventListener('click', () => {
            showStatus("Saving page content...", "info", false);
            chrome.runtime.sendMessage({ type: "SAVE_PAGE_CONTENT" }, handleActionResponse);
        });
    } else { console.warn("WebInsight Panel: Save Page button not found."); }

    if (panelSavePageAsPDFBtn) {
        panelSavePageAsPDFBtn.addEventListener('click', () => {
            showStatus("Generating PDF... This may take a moment.", "info", false);
            chrome.runtime.sendMessage({ type: "SAVE_PAGE_AS_PDF", payload: { preset: 'standard' } }, handleActionResponse);
        });
    } else { console.warn("WebInsight Panel: Save Page as PDF button not found."); }
    
    if (panelSaveSelectionBtn) {
        panelSaveSelectionBtn.addEventListener('click', () => {
            showStatus("Saving selection...", "info", false);
            chrome.runtime.sendMessage({ type: "SAVE_SELECTION" }, handleActionResponse);
        });
    } else { console.warn("WebInsight Panel: Save Selection button not found."); }

    if (panelCaptureVisibleBtn) {
        panelCaptureVisibleBtn.addEventListener('click', () => {
            showStatus("Capturing visible area...", "info", false);
            chrome.runtime.sendMessage({ type: "CAPTURE_VISIBLE_TAB" }, handleActionResponse);
        });
    } else { console.warn("WebInsight Panel: Capture Visible button not found."); }

    if (panelCaptureAreaBtn) {
        panelCaptureAreaBtn.addEventListener('click', () => {
            showStatus("Initiating area capture... Draw on page.", "info", false);
            // Response for INITIATE_AREA_CAPTURE is handled slightly differently to update status.
            chrome.runtime.sendMessage({ type: "INITIATE_AREA_CAPTURE" }, (response) => {
                if (response && response.success) {
                    showStatus("Draw selection area on the page.", "info", false);
                } else {
                    handleActionResponse(response); // Use generic handler for errors or unexpected success.
                }
            });
        });
    } else { console.warn("WebInsight Panel: Capture Area button not found."); }

    // Listener for the "Generate Report" button.
    if (generateReportBtn) {
        generateReportBtn.addEventListener('click', handleGenerateReportClick);
    } else {
        console.warn("WebInsight Panel: Generate Report button not found.");
    }

    // Listener for the "Clear Filter" button.
    if (clearTagFilterBtn) {
        clearTagFilterBtn.addEventListener('click', handleClearFilter);
    } else {
        console.warn("WebInsight Panel: Clear Tag Filter button not found.");
    }

    // Listener for the "Get Key Points" button.
    if (getKeyPointsBtn) {
        getKeyPointsBtn.addEventListener('click', handleGetKeyPointsClick);
    } else {
        console.warn("WebInsight Panel: Get Key Points button not found.");
    }

    // Listeners for AI control buttons.
    if (initializeAIBtn) {
        initializeAIBtn.addEventListener('click', handleInitializeAI);
    } else {
        console.warn("WebInsight Panel: Initialize AI button not found.");
    }
    if (generateEmbeddingsBtn) {
        generateEmbeddingsBtn.addEventListener('click', handleGenerateEmbeddings);
    } else {
        console.warn("WebInsight Panel: Generate Embeddings button not found.");
    }

    // Event delegation for clicks within the dynamic content item list.
    // This single listener handles clicks on item summaries (to expand/collapse details)
    // and delete buttons for individual items.
    if (panelContentListEl) {
        console.log("WebInsight Panel: Attaching click listener to panelContentListEl for event delegation.");
        panelContentListEl.addEventListener('click', (event) => {
            const itemElement = event.target.closest('.content-item'); // Find the parent .content-item.
            if (!itemElement) return; // Click was not inside a content item.

            const itemId = parseInt(itemElement.dataset.itemId, 10); // Get item ID from data attribute.

            // Handle delete button clicks.
            if (event.target.classList.contains('delete-btn')) {
                event.stopPropagation(); // Prevent click from also toggling details.
                const itemTitle = itemElement.querySelector('.item-summary strong')?.textContent || `Item ${itemId}`;
                deleteItem(itemId, itemTitle); // Call delete function.
                return;
            }

            // Handle clicks on the item summary to toggle details visibility.
            const summaryElement = event.target.closest('.item-summary');
            if (summaryElement && !event.target.closest('.item-details')) { // Ensure click is on summary, not already expanded details.
                const detailsDiv = itemElement.querySelector('.item-details');
                if (detailsDiv) {
                    const isVisible = detailsDiv.style.display === 'block';

                    // Collapse all other open items before expanding/collapsing the current one.
                    document.querySelectorAll('#panelContentList .item-details').forEach(el => {
                        if (el !== detailsDiv && el.style.display === 'block') {
                            el.style.display = 'none';
                            el.innerHTML = ''; // Clear content of collapsed details.
                        }
                    });

                    if (isVisible) { // If currently visible, hide it.
                        detailsDiv.style.display = 'none';
                        detailsDiv.innerHTML = ''; // Clear content.
                    } else { // If hidden, fetch item data from cache and display details.
                        const itemData = currentItemsCache.find(i => i.id === itemId);
                        if (itemData) {
                            displayItemDetails(itemData, detailsDiv); // Populate and show details.
                            detailsDiv.style.display = 'block';
                        } else {
                            console.error(`WebInsight Panel: Item data for ID ${itemId} not found in cache.`);
                            detailsDiv.innerHTML = '<p class="error">Error: Item details could not be loaded.</p>';
                            detailsDiv.style.display = 'block';
                        }
                    }
                } else {
                    console.warn(`WebInsight Panel: .item-details div not found for item ID ${itemId}.`);
                }
            }
        });
    } else { 
        console.error("WebInsight Panel: Critical - panelContentListEl not found. UI interactions will fail.");
    }
}

// --- Storage & Theme Change Listeners ---

/**
 * Listens for changes in `chrome.storage` (both 'sync' and 'local').
 * - If the 'theme' in `sync` storage changes, it re-applies the theme to the panel.
 * - If `lastSaveTimestamp` or `lastAnalysisTimestamp` in `local` storage changes (indicating
 *   data modification by background script), it reloads tags and content in the panel.
 */
chrome.storage.onChanged.addListener((changes, namespace) => {
    console.log(`WebInsight Panel: Storage change detected in namespace '${namespace}'. Changes:`, changes);
    if (namespace === 'sync' && changes.theme) {
        console.log("WebInsight Panel: Theme changed in sync storage, re-applying panel theme.");
        applyPanelTheme();
    }
    // If any data modification timestamp changes, reload relevant panel data.
    if (namespace === 'local' && (changes.lastSaveTimestamp || changes.lastAnalysisTimestamp)) {
        console.log("WebInsight Panel: Data change detected (save/analysis timestamp updated), reloading panel content and filter tags.");
        loadFilterTags(); // Reload available tags for filtering.
        loadSavedContent(currentFilterTagId); // Reload content, respecting current filter.
    }
});

/**
 * Listens for changes in the system's preferred color scheme (dark/light mode).
 * If the theme setting is 'system', this ensures the panel theme updates accordingly.
 */
window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    console.log("WebInsight Panel: System preferred color scheme changed, re-applying theme if set to 'system'.");
    applyPanelTheme();
});


// --- Response Handling ---

/**
 * Handles generic responses from the background script for actions like saving content or capturing screenshots.
 * Displays a success or error message in the panel's status area.
 *
 * @param {object} response - The response object from `chrome.runtime.sendMessage`.
 * Expected structure: `{ success: boolean, id?: number, message?: string, error?: string }`.
 */
function handleActionResponse(response) {
    if (!response) {
        showStatus("Error: No response received from background script.", "error");
        console.error("WebInsight Panel: No response received for action.");
        return;
    }
    if (response.success) {
        const message = response.id ? `Success! Item saved (ID: ${response.id}).` : response.message || "Operation successful.";
        showStatus(message, "success");
        // Data refresh is now primarily handled by the chrome.storage.onChanged listener
        // reacting to 'lastSaveTimestamp' or 'lastAnalysisTimestamp'.
    } else {
        const errorMsg = response.error || "An unknown error occurred.";
        showStatus(`Error: ${errorMsg}`, "error");
        console.error("WebInsight Panel: Action failed. Error reported by background:", errorMsg);
    }
}

// --- Content List Management ---

/**
 * Fetches and displays saved content items in the panel.
 * Can be filtered by a specific tag ID. If no `filterTagId` is provided, all items are fetched.
 * Updates the `currentItemsCache` with the fetched items.
 *
 * @param {number | null} [filterTagId=null] - Optional ID of the tag to filter by.
 *                                             If `null`, all content items are fetched.
 */
function loadSavedContent(filterTagId = null) {
    console.log(`WebInsight Panel: Loading saved content. Filter Tag ID: ${filterTagId}`);
    
    currentFilterTagId = filterTagId; // Update global state for current filter.
    if (filterTagId === null) {
        currentFilterTagName = null; // Clear tag name if filter is cleared.
    }

    if (!panelContentListEl) { 
        console.error("WebInsight Panel: panelContentListEl not found. Cannot display content.");
        return; 
    }
    
    // Display loading message and hide any previous key points results.
    panelContentListEl.innerHTML = '<p><i>Loading items...</i></p>';
    if (panelStatusMessageEl && panelStatusMessageEl.textContent.includes('Loading')) {
        clearStatus(); // Clear general status if it was also 'Loading'.
    }
    hideKeyPointsResultArea(); // Hide key points area when list reloads.

    // Determine message type and payload based on whether a filter is active.
    const messageType = filterTagId !== null ? "GET_FILTERED_ITEMS_BY_TAG" : "GET_ALL_SAVED_CONTENT";
    const payload = filterTagId !== null ? { tagId: filterTagId } : {};

    console.log(`WebInsight Panel: Sending message to background: ${messageType}`, payload);
    
    // Request data from the background script.
    chrome.runtime.sendMessage({ type: messageType, payload: payload }, (response) => {
        console.log(`WebInsight Panel: Response received from background for ${messageType}:`, response);
        
        if (response && response.success && Array.isArray(response.payload)) {
            // Update cache with fetched items.
            currentItemsCache = response.payload || [];
            window.currentItemsCache = currentItemsCache; // Update debug global.
            
            console.log(`WebInsight Panel: Content cache updated with ${currentItemsCache.length} items.`);
            displayContentItems(currentItemsCache); // Render the items.
        } else {
            // Handle error or invalid response.
            currentItemsCache = []; // Clear cache on error.
            window.currentItemsCache = currentItemsCache;
            
            const errorMsg = response?.error || `Failed to load ${filterTagId !== null ? 'filtered ' : ''}items.`;
            console.error("WebInsight Panel: Failed to load content:", errorMsg);
            panelContentListEl.innerHTML = `<p class="error"><i>Error loading items: ${errorMsg}</i></p>`;
            showStatus(`Error loading items: ${errorMsg}`, "error", false); // Show persistent error.
        }
        
        // Update visibility of Key Points and Generate Report buttons based on new filter state.
        updateKeyPointsButtonVisibility();
    });
}

/**
 * Renders an array of content items into the panel's content list element.
 * Clears any existing content and displays a message if the items array is empty.
 * Items are sorted by creation date (newest first) before display.
 *
 * @param {Array<object>} items - An array of content item objects to display.
 *                                Each item object should conform to the data structure
 *                                stored in IndexedDB (e.g., id, type, title, content, createdAt).
 */
function displayContentItems(items) {
     if (!panelContentListEl) {
        console.error("WebInsight Panel: panelContentListEl not found. Cannot display items.");
        return;
     }
     panelContentListEl.innerHTML = ''; // Clear previous items or loading message.
     console.log(`WebInsight Panel: Displaying ${items.length} content items.`);

     if (items.length === 0) {
         const message = currentFilterTagId !== null ?
             'No items found matching the selected filter.' :
             'No items have been saved yet.';
         panelContentListEl.innerHTML = `<p><i>${message}</i></p>`;
     } else {
         // Sort items by creation date, newest first.
         const sortedItems = items.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
         sortedItems.forEach(item => {
             try {
                 // Create and append the HTML element for each item.
                 panelContentListEl.appendChild(createContentItemElement(item));
             } catch (error) {
                  console.error(`WebInsight Panel: Error creating element for item ID ${item.id}:`, error);
                  // Display a placeholder if an item fails to render.
                  const errorDiv = document.createElement('div');
                  errorDiv.className = 'content-item error';
                  errorDiv.textContent = `Error loading item ID ${item.id}. Please check console for details.`;
                  panelContentListEl.appendChild(errorDiv);
             }
         });
     }
}

/**
 * Creates an HTML element representing a single content item for display in the panel list.
 * This function generates a summary view of the item, including its title, type, a preview,
 * creation timestamp, and a delete button. It handles different item types
 * (`page`, `selection`, `screenshot`, `pdf`, `generated_analysis`) to display relevant information.
 *
 * @param {object} item - The content item object.
 * @returns {HTMLElement} A `div` element representing the content item summary.
 */
function createContentItemElement(item) {
    const div = document.createElement('div');
    div.className = 'content-item';
    div.dataset.itemId = item.id; // Store item ID for event handling.
    // console.log(`WebInsight Panel: Creating element for item ID: ${item.id}, Type: ${item.type}`);

    let contentPreview = ''; // HTML string for the item's content preview.
    let analysisStatus = ''; // Text indicating AI analysis status (for screenshots).
    let titlePrefix = '';    // Prefix for the title (e.g., "[Generated]").
    let itemTypeDisplay = item.type; // How the item type is displayed.

    // Customize preview and status based on item type.
    switch (item.type) {
        case 'page':
        case 'selection':
            contentPreview = (item.content || '').substring(0, 150) + ((item.content || '').length > 150 ? '...' : '');
            break;
        case 'screenshot':
            contentPreview = `<img src="${item.content}" alt="Screenshot thumbnail" class="screenshot-thumbnail"> Screenshot captured`;
            // Display AI analysis status for screenshots.
            if (item.analysisCompleted === true && !item.analysisFailed) {
                analysisStatus = ' <span class="analysis-status success">(Analyzed)</span>';
            } else if (item.analysisFailed === true) {
                analysisStatus = ' <span class="analysis-status error">(Analysis Failed)</span>';
            } else if (item.analysis !== undefined && item.analysis !== null) { // In progress or pending
                analysisStatus = ' <span class="analysis-status pending">(Analyzing...)</span>';
            } else { // Not yet started
                analysisStatus = ' <span class="analysis-status pending">(Analysis Pending)</span>';
            }
            break;
        case 'pdf':
            const fileSizeKB = item.fileSize ? Math.round(item.fileSize / 1024) : 'Unknown';
            contentPreview = `📄 PDF Document (${fileSizeKB}KB)`;
            analysisStatus = ''; // No direct AI analysis status for PDFs shown in summary.
            break;
        case GENERATED_ITEM_TYPE: // For AI-generated items like key points.
            titlePrefix = '[Generated] ';
            itemTypeDisplay = item.analysisType || 'Analysis'; // e.g., 'key_points' or default 'Analysis'.
            contentPreview = (item.content || '').substring(0, 150) + ((item.content || '').length > 150 ? '...' : '');
            analysisStatus = ` <span class="analysis-status generated">(${itemTypeDisplay})</span>`;
            break;
        default:
            contentPreview = 'Unknown item type. Cannot display preview.';
            itemTypeDisplay = item.type || 'Unknown';
            break;
    }

    // Construct the inner HTML for the item summary.
    div.innerHTML = `
        <div class="item-summary">
            <strong>${titlePrefix}${item.title || `Item ${item.id}`} (${itemTypeDisplay})${analysisStatus}</strong>
            <p class="preview">${contentPreview || '<i>No preview available.</i>'}</p>
            <span class="timestamp">${new Date(item.createdAt).toLocaleString()}</span>
            <button class="delete-btn" title="Delete Item">&times;</button>
        </div>
        <div class="item-details" style="display: none;">
            <!-- Detailed content will be loaded here when expanded -->
        </div>
    `;
    return div;
}


/**
 * Populates the detail area of a content item when it's expanded in the panel.
 * Displays different information based on the item type, including full content,
 * metadata, AI analysis results (for screenshots), PDF previews/actions, and tag management controls.
 *
 * @param {object} item - The full content item object (typically from `currentItemsCache`).
 * @param {HTMLElement} detailElement - The `div.item-details` element to populate.
 */
function displayItemDetails(item, detailElement) {
    console.log(`WebInsight Panel: Displaying details for item ID: ${item.id}, Type: ${item.type}`);
    detailElement.innerHTML = '<i>Loading details...</i>'; // Placeholder while content is built.

    let contentHtml = '';   // For main content display (text, image, PDF embed).
    let analysisHtml = '';  // For AI analysis results.
    let metadataHtml = '';  // For source URL and other metadata.

    // --- Build HTML based on item type ---
    if (item.type === GENERATED_ITEM_TYPE) {
        // Display for AI-generated analysis items (e.g., key points).
        contentHtml = `
            <h4>Content (${item.analysisType || 'Generated Analysis'}):</h4>
            <pre class="content-preview">${item.content || 'No content available.'}</pre>
            ${item.wordCount !== null ? `<p><small>Word Count: ${item.wordCount}, Est. Reading Time: ${item.readingTimeMinutes} min</small></p>` : ''}
            <h4>Generation Source:</h4>
            <p><small>Based on Tag ID(s): ${item.sourceTagIds?.join(', ') || 'N/A'}</small></p>
            <p><small>Based on Item ID(s): ${item.sourceItemIds?.join(', ') || 'N/A'}</small></p>
            ${item.sourceInfo ? `<p><small>Context: ${item.sourceInfo}</small></p>` : ''}
        `;
        analysisHtml = '<p><i>Analysis details are not applicable for already generated items.</i></p>';
        metadataHtml = ''; // No original source URL for generated items.

    } else if (item.type === 'pdf') {
        // Display for PDF items: info, download/view buttons, and an embedded iframe preview.
        const fileSizeKB = item.fileSize ? Math.round(item.fileSize / 1024) : 'Unknown';
        const safeTitle = (item.title || 'document').replace(/[^a-z0-9]/gi, '_'); // Sanitize title for download.
        contentHtml = `
            <div class="pdf-preview">
                <p><strong>📄 PDF Document</strong></p>
                <p>File Size: ${fileSizeKB}KB</p>
                <div class="pdf-actions">
                    <a href="${item.content}" download="${safeTitle}.pdf" class="pdf-download-btn">Download PDF</a>
                    <button onclick="window.open('${item.content}', '_blank')" class="pdf-view-btn">View in New Tab</button>
                </div>
                <div class="pdf-embed-container">
                    <iframe src="${item.content}" width="100%" height="400px" style="border: 1px solid var(--panel-border-light); border-radius: 4px;" title="PDF Preview"></iframe>
                </div>
            </div>
        `;
        analysisHtml = '<p><i>AI analysis is not applicable for PDF documents.</i></p>';
        metadataHtml = `
            <h4>Source Information:</h4>
            <p><small>Original URL: <a href="${item.url || '#'}" target="_blank" title="${item.url || ''}">${item.url || 'N/A'}</a></small></p>
            ${item.characterCount ? `<p><small>Original Page Approx. Character Count: ${item.characterCount.toLocaleString()}</small></p>` : ''}
            ${item.pdfOptions ? `<p><small>PDF Settings: ${item.pdfOptions.landscape ? 'Landscape' : 'Portrait'}, Scale: ${(item.pdfOptions.scale || 1) * 100}%</small></p>` : ''}
            ${item.pageDescription ? `<p><small>Original Page Description: ${item.pageDescription}</small></p>` : ''}
        `;

    } else if (item.type === 'page' || item.type === 'selection') {
        // Display for saved web pages or text selections.
        contentHtml = `<pre class="content-full">${item.content || 'No text content available.'}</pre>`;
        analysisHtml = '<p><i>AI analysis is typically not run on plain text items.</i></p>';
        metadataHtml = `
            <h4>Source:</h4>
            <p><small>URL: <a href="${item.url || '#'}" target="_blank" title="${item.url || ''}">${item.url || 'N/A'}</a></small></p>
            ${item.wordCount !== null ? `<p><small>Word Count: ${item.wordCount}, Est. Reading Time: ${item.readingTimeMinutes} min</small></p>` : ''}
        `;

    } else if (item.type === 'screenshot') {
        // Display for screenshots, including AI analysis results if available.
        contentHtml = `<img src="${item.content}" alt="Full screenshot for item ${item.id}" class="screenshot-full">`;
        analysisHtml = '<h4>AI Analysis of Screenshot</h4>';
        if (item.analysis) { // Check if analysis object exists.
            let analysisContent = '';
            if (item.analysis.description) analysisContent += `<p><strong>Description:</strong> ${item.analysis.description}</p>`;
            if (item.analysis.descriptionError) analysisContent += `<p class="error"><strong>Description Error:</strong> ${item.analysis.descriptionError}</p>`;

            analysisContent += '<p><strong>Diagram/Chart Info:</strong> ';
            if (item.analysis.diagramData === null || item.analysis.diagramData?.contains_diagram === false) {
                analysisContent += '<em>None detected by AI.</em>';
            } else if (typeof item.analysis.diagramData === 'object' && !item.analysis.diagramData.parse_error && !item.analysis.diagramData.text_summary) {
                analysisContent += `<pre><code>${JSON.stringify(item.analysis.diagramData, null, 2)}</code></pre>`; // Display raw JSON if no summary.
            } else if (item.analysis.diagramData?.text_summary) {
                analysisContent += `<em>${item.analysis.diagramData.text_summary}</em>${item.analysis.diagramData.parse_error ? ' <span class="error">(JSON parse error)</span>' : ''}`;
            } else {
                analysisContent += `<em>Analysis data present but in unexpected format.</em>`;
            }
            analysisContent += '</p>';
            if (item.analysis.diagramError) analysisContent += `<p class="error"><strong>Diagram Analysis Error:</strong> ${item.analysis.diagramError}</p>`;

            analysisContent += '<p><strong>Page Layout Info:</strong> ';
            if (item.analysis.layout === null || item.analysis.layout?.is_webpage_layout === false) {
                analysisContent += '<em>Not applicable or not detected by AI.</em>';
            } else if (typeof item.analysis.layout === 'object' && !item.analysis.layout.parse_error && !item.analysis.layout.text_summary) {
                analysisContent += `<pre><code>${JSON.stringify(item.analysis.layout, null, 2)}</code></pre>`;
            } else if (item.analysis.layout?.text_summary) {
                analysisContent += `<em>${item.analysis.layout.text_summary}</em>${item.analysis.layout.parse_error ? ' <span class="error">(JSON parse error)</span>' : ''}`;
            } else {
                analysisContent += `<em>Analysis data present but in unexpected format.</em>`;
            }
            analysisContent += '</p>';
            if (item.analysis.layoutError) analysisContent += `<p class="error"><strong>Layout Analysis Error:</strong> ${item.analysis.layoutError}</p>`;
            if (item.analysis.error) analysisContent += `<p class="error"><strong>Overall Analysis Error:</strong> ${item.analysis.error}</p>`; // General error.

            analysisHtml += analysisContent || '<p><em>No specific analysis results available.</em></p>';
        } else if (item.analysisCompleted === true) { // Analysis ran but produced no 'analysis' object.
             analysisHtml += '<p><em>Analysis completed, but no results were found or results were empty.</em></p>';
        } else if (item.analysisFailed === true) { // Analysis was attempted but failed.
             analysisHtml += '<p class="error"><em>AI analysis failed to complete for this item. Check background script logs for details.</em></p>';
        } else { // Analysis not yet run or pending.
             analysisHtml += '<p><em>AI analysis is pending or has not been run for this screenshot.</em></p>';
        }
        metadataHtml = `
            <h4>Source:</h4>
            <p><small>URL: <a href="${item.url || '#'}" target="_blank" title="${item.url || ''}">${item.url || 'N/A'}</a></small></p>
        `;
    }

    // --- Assemble the complete detail view HTML ---
    detailElement.innerHTML = `
        <div class="detail-content">${contentHtml}</div>
        <div class="detail-metadata">${metadataHtml}</div>
        <div class="detail-analysis">${analysisHtml}</div>
        <div class="detail-tags-section">
            <h5>Tags:</h5>
            <div class="tags-list" data-content-id="${item.id}"><i>Loading tags...</i></div>
            <div class="add-tag-controls">
                <input type="text" class="add-tag-input" placeholder="Add new or suggest tags..." aria-label="Add new tag for item ${item.id}">
                <button class="add-tag-btn" data-content-id="${item.id}" title="Add typed tag or get AI suggestions if input is empty">Add / Suggest</button>
            </div>
        </div>
        <button class="close-details-btn" aria-label="Close details view for item ${item.id}">Close Details</button>
    `;
    // console.log("WebInsight Panel: Detail view HTML populated for item ID:", item.id);

    // Fetch and display tags for this item within its detail view.
    const tagsListElement = detailElement.querySelector('.tags-list');
    if (tagsListElement) {
        fetchAndDisplayTags(item.id, tagsListElement);
    } else {
        console.warn(`WebInsight Panel: .tags-list element not found in details for item ID ${item.id}.`);
    }

    // Add event listeners for tag input and button within this specific detail view.
    const addTagInput = detailElement.querySelector('.add-tag-input');
    const addTagButton = detailElement.querySelector('.add-tag-btn');
    if (addTagInput && addTagButton) {
        const handleAddTagEvent = () => {
            const tagName = addTagInput.value.trim();
            // Use item.content for text-based items, or item.title for screenshots/PDFs as context for suggestions.
            const contextTextForAISuggestions = (item.type === 'page' || item.type === 'selection') ? item.content : item.title;
            
            // Call enhancedAddTag, which handles both direct input and AI suggestions.
            enhancedAddTag(item.id, tagName, contextTextForAISuggestions, addTagInput, tagsListElement);
            addTagInput.value = ''; // Clear input after attempting to add/suggest.
        };
        addTagButton.addEventListener('click', handleAddTagEvent);
        addTagInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleAddTagEvent();
            }
        });
    }

    // Add event listener for the "Close Details" button.
    const closeButton = detailElement.querySelector('.close-details-btn');
    if (closeButton) {
        closeButton.onclick = () => {
            detailElement.style.display = 'none'; // Hide details section.
            detailElement.innerHTML = ''; // Clear its content to free resources.
        };
    }
}


/**
 * Fetches tags for a given content item and displays them in the provided DOM element.
 * Each tag is displayed with a "remove" button.
 *
 * @param {number} contentId - The ID of the content item whose tags are to be fetched.
 * @param {HTMLElement} tagsListElement - The DOM element where the tags should be displayed.
 */
function fetchAndDisplayTags(contentId, tagsListElement) {
    // console.log(`WebInsight Panel: Fetching tags for contentId: ${contentId}`);
    if (!tagsListElement) {
        console.error("WebInsight Panel: Cannot display tags, tagsListElement is null for contentId:", contentId);
        return;
    }
    tagsListElement.innerHTML = '<i>Loading tags...</i>'; // Show loading state.

    // Request tags from the background script.
    chrome.runtime.sendMessage({ type: 'GET_TAGS_FOR_ITEM', payload: { contentId: contentId } }, (response) => {
        // console.log(`WebInsight Panel: Response for GET_TAGS_FOR_ITEM (contentId ${contentId}):`, response);
        tagsListElement.innerHTML = ''; // Clear loading message.

        if (response && response.success && Array.isArray(response.payload)) {
            const tags = response.payload;
            if (tags.length === 0) {
                tagsListElement.innerHTML = '<i>No tags yet.</i>';
            } else {
                // Sort tags alphabetically and create elements for each.
                tags.sort((a, b) => a.name.localeCompare(b.name));
                tags.forEach(tag => {
                    const tagSpan = document.createElement('span');
                    tagSpan.className = 'tag-item';
                    tagSpan.textContent = tag.name;
                    tagSpan.dataset.tagId = tag.id;

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'remove-tag-btn';
                    removeBtn.innerHTML = '&times;'; // "X" symbol for remove.
                    removeBtn.title = `Remove tag "${tag.name}"`;
                    removeBtn.dataset.tagId = tag.id;
                    removeBtn.dataset.contentId = contentId;
                    // Add event listener to the remove button for this tag.
                    removeBtn.addEventListener('click', (e) => {
                        e.stopPropagation(); // Prevent click from bubbling to parent elements.
                        const tagIdToRemove = parseInt(e.target.dataset.tagId);
                        const contentIdToRemoveFrom = parseInt(e.target.dataset.contentId);
                        if (!isNaN(tagIdToRemove) && !isNaN(contentIdToRemoveFrom)) {
                            showStatus(`Removing tag "${tag.name}"...`, 'info', false);
                            chrome.runtime.sendMessage(
                                { type: 'REMOVE_TAG_FROM_ITEM', payload: { contentId: contentIdToRemoveFrom, tagId: tagIdToRemove } },
                                (response) => handleTagActionResponse(response, contentIdToRemoveFrom, tagsListElement)
                            );
                        } else {
                            console.error("WebInsight Panel: Invalid tagId/contentId for removal:", e.target.dataset);
                            showStatus("Error: Could not remove tag due to invalid ID.", "error");
                        }
                    });
                    tagSpan.appendChild(removeBtn);
                    tagsListElement.appendChild(tagSpan);
                });
            }
        } else {
            console.error(`WebInsight Panel: Failed to fetch tags for item ${contentId}:`, response?.error);
            tagsListElement.innerHTML = '<i class="error">Failed to load tags.</i>';
        }
    });
}

/**
 * Handles responses from tag add/remove actions.
 * If successful, it refreshes the tag list for the specific item and also reloads
 * the main tag filter list in case new tags were added or old ones are no longer used.
 *
 * @param {object} response - The response object from the background script.
 * @param {number} contentId - The ID of the content item whose tags were modified.
 * @param {HTMLElement} tagsListElement - The DOM element displaying tags for the specific item.
 */
function handleTagActionResponse(response, contentId, tagsListElement) {
    // console.log(`WebInsight Panel: Tag action response for contentId ${contentId}:`, response);
    if (response && response.success) {
        showStatus("Tag action successful!", "success");
        // Refresh tags for the current item if its details view is still open and valid.
        if (tagsListElement && document.body.contains(tagsListElement)) {
            fetchAndDisplayTags(contentId, tagsListElement);
        } else {
            // If specific item's tag list isn't visible/valid, log it.
            // This might happen if details were closed before response.
            console.warn(`WebInsight Panel: Item's tagsListElement no longer valid for contentId ${contentId}, cannot refresh its specific tags.`);
        }
        loadFilterTags(); // Always reload the global tag filter list.
    } else {
        showStatus(`Tag action failed: ${response?.error || 'Unknown error'}`, "error");
    }
}

/**
 * Initiates the deletion of a content item.
 * Prompts the user for confirmation before sending a delete request to the background script.
 *
 * @param {number} id - The ID of the content item to delete.
 * @param {string} [title=''] - The title of the item, used in the confirmation message.
 */
function deleteItem(id, title = '') {
    // console.log(`WebInsight Panel: Attempting to delete item ID: ${id}, Title: "${title}"`);
    const confirmMessage = `Are you sure you want to delete "${title || `Item ${id}`}"? This action cannot be undone.`;

    // Use a simple confirm dialog. For better UX, a custom modal could be implemented.
    if (!confirm(confirmMessage)) {
        console.log("WebInsight Panel: Delete action cancelled by user for item ID:", id);
        return;
    }

    showStatus(`Deleting item ${id}...`, "info", false);
    chrome.runtime.sendMessage({ type: "DELETE_ITEM", payload: { id: id } }, (response) => {
        // Use generic action response handler.
        handleActionResponse(response ? response : { success: false, error: 'No response from background for delete action.' });
        // console.log(`WebInsight Panel: Delete item message sent for ID ${id}. Response processed.`);
        // The list refresh is handled by the storage listener.
    });
}

// --- Status Message Management --- (Unchanged from previous logic, comments added for clarity)
function showStatus(message, type = "info", autoClear = true) { if (!panelStatusMessageEl) return; panelStatusMessageEl.textContent = message; panelStatusMessageEl.className = `status-message ${type}`; panelStatusMessageEl.style.display = 'block'; if (autoClear) { setTimeout(() => { if (panelStatusMessageEl.textContent === message) clearStatus(); }, 3500); } }
function clearStatus() { if (!panelStatusMessageEl) return; panelStatusMessageEl.style.display = 'none'; panelStatusMessageEl.textContent = ''; panelStatusMessageEl.className = 'status-message'; }
// --- Theme Management --- (Unchanged)
function applyPanelTheme() { chrome.storage.sync.get(['theme'], (syncResult) => { const theme = syncResult.theme || 'system'; const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches; const useDarkMode = theme === 'dark' || (theme === 'system' && prefersDark); if (useDarkMode) document.body.classList.add('dark-mode'); else document.body.classList.remove('dark-mode'); console.log(`Panel theme applied: ${theme === 'system' ? (prefersDark ? 'dark (system)' : 'light (system)') : theme}`); }); }


// --- Filter Logic ---

/**
 * Fetches all unique tags from the database (via background script)
 * and populates the tag filter list in the panel UI.
 * Each tag is displayed as a clickable button.
 */
function loadFilterTags() {
    if (!tagFilterListEl) {
        console.error("WebInsight Panel: Tag filter list element (tagFilterListEl) not found.");
        return;
    }
    tagFilterListEl.innerHTML = '<i>Loading tags...</i>'; // Placeholder.

    chrome.runtime.sendMessage({ type: "GET_ALL_TAGS" }, (response) => {
        tagFilterListEl.innerHTML = ''; // Clear loading message.
        if (response && response.success && Array.isArray(response.payload)) {
            const tags = response.payload;
            if (tags.length === 0) {
                tagFilterListEl.innerHTML = '<i>No tags available to filter by.</i>';
                if (clearTagFilterBtn) clearTagFilterBtn.style.display = 'none';
                if (getKeyPointsBtn) getKeyPointsBtn.style.display = 'none'; // Hide if no tags.
            } else {
                // Sort tags alphabetically for consistent display.
                tags.sort((a, b) => a.name.localeCompare(b.name));
                tags.forEach(tag => {
                    const tagButton = document.createElement('button');
                    tagButton.className = 'tag-filter-item';
                    tagButton.textContent = tag.name;
                    tagButton.dataset.tagId = tag.id;
                    tagButton.dataset.tagName = tag.name; // Store name for UI updates.
                    tagButton.title = `Filter by tag: ${tag.name}`;
                    // Highlight if this tag is the currently active filter.
                    if (currentFilterTagId === tag.id) {
                        tagButton.classList.add('active');
                    }
                    tagButton.addEventListener('click', handleFilterTagClick);
                    tagFilterListEl.appendChild(tagButton);
                });
                // Manage visibility of "Clear Filter" and "Get Key Points" buttons.
                if (clearTagFilterBtn) {
                    clearTagFilterBtn.style.display = currentFilterTagId !== null ? 'inline-block' : 'none';
                }
                updateKeyPointsButtonVisibility(); // Updates both Key Points & Report buttons.
            }
        } else {
            console.error("WebInsight Panel: Failed to load tags for filtering.", response?.error);
            tagFilterListEl.innerHTML = '<i class="error">Error loading tags.</i>';
            if (getKeyPointsBtn) getKeyPointsBtn.style.display = 'none';
        }
    });
}

/**
 * Handles clicks on a tag button in the filter list.
 * Sets the clicked tag as the active filter, updates the UI to reflect this,
 * and then reloads the content list to show only items with that tag.
 * If the clicked tag is already active, it clears the filter.
 *
 * @param {MouseEvent} event - The click event from the tag filter button.
 */
function handleFilterTagClick(event) {
    const clickedTagButton = event.target;
    const tagId = parseInt(clickedTagButton.dataset.tagId);
    const tagName = clickedTagButton.dataset.tagName;

    if (isNaN(tagId)) {
        console.error("WebInsight Panel: Invalid tag ID on filter button:", clickedTagButton.dataset.tagId);
        return;
    }

    // If clicking the currently active tag, effectively clear the filter.
    if (clickedTagButton.classList.contains('active')) {
         handleClearFilter();
         return;
    }

    console.log(`WebInsight Panel: Filtering by tag ID: ${tagId} (Name: "${tagName}")`);
    currentFilterTagId = tagId;       // Set global filter state.
    currentFilterTagName = tagName;   // Store name for UI.

    // Update button styles to show active filter.
    const currentActiveButton = tagFilterListEl.querySelector('.tag-filter-item.active');
    if (currentActiveButton) {
        currentActiveButton.classList.remove('active');
    }
    clickedTagButton.classList.add('active');
    if (clearTagFilterBtn) {
        clearTagFilterBtn.style.display = 'inline-block'; // Show "Clear Filter" button.
    }

    loadSavedContent(tagId); // Reload content list, filtered by the selected tag.
                             // loadSavedContent also calls updateKeyPointsButtonVisibility.
}

/**
 * Handles a click on the "Clear Filter" button.
 * Resets the active tag filter, updates the UI accordingly, and reloads all content items.
 */
function handleClearFilter() {
    console.log("WebInsight Panel: Clearing active tag filter.");
    if (currentFilterTagId === null) return; // No filter active, nothing to clear.

    currentFilterTagId = null;   // Reset global filter state.
    currentFilterTagName = null;

    // Reset UI: remove 'active' class from any filter button and hide "Clear Filter" button.
    const currentActiveButton = tagFilterListEl.querySelector('.tag-filter-item.active');
    if (currentActiveButton) {
        currentActiveButton.classList.remove('active');
    }
    if (clearTagFilterBtn) {
        clearTagFilterBtn.style.display = 'none';
    }

    loadSavedContent(null); // Load all content items.
                            // loadSavedContent also calls updateKeyPointsButtonVisibility.
}

// --- Key Points & Report Generation Logic ---

/**
 * Handles a click on the "Get Key Points" button.
 * If a tag is currently selected for filtering, this function sends a message
 * to the background script to generate key points for that tag.
 * It updates the UI to indicate processing and hides any previous key points results.
 */
function handleGetKeyPointsClick() {
    if (currentFilterTagId === null || !getKeyPointsBtn) {
        console.warn("WebInsight Panel: Get Key Points button clicked but no filter tag selected or button not found.");
        return;
    }

    console.log(`WebInsight Panel: Requesting key points for tag ID: ${currentFilterTagId} (Name: "${currentFilterTagName}")`);
    showStatus(`Generating key points for tag "${currentFilterTagName || 'selected'}"...`, 'info', false);
    hideKeyPointsResultArea(); // Clear previous results.

    // Disable button to prevent multiple clicks while processing.
    getKeyPointsBtn.disabled = true;
    getKeyPointsBtn.textContent = 'Generating...';

    chrome.runtime.sendMessage(
        { type: 'GET_KEY_POINTS_FOR_TAG', payload: { tagId: currentFilterTagId } },
        handleKeyPointsResponse // Callback to handle the response.
    );
}

/**
 * Handles a click on the "Generate Report" button.
 * If a tag is currently selected for filtering, this function sends a message
 * to the background script to generate a PDF report for that tag.
 * Updates the UI to indicate processing.
 */
function handleGenerateReportClick() {
    if (currentFilterTagId === null || !generateReportBtn) {
        console.warn("WebInsight Panel: Generate Report button clicked but no filter tag selected or button not found.");
        return;
    }

    console.log(`WebInsight Panel: Requesting PDF report generation for tag ID: ${currentFilterTagId} (Name: "${currentFilterTagName}")`);
    showStatus(`Generating PDF report for tag "${currentFilterTagName || 'selected'}"... This may take a moment.`, 'info', false);

    // Disable button during processing.
    generateReportBtn.disabled = true;
    generateReportBtn.textContent = 'Generating...';

    chrome.runtime.sendMessage(
        { type: 'GENERATE_PDF_REPORT_FOR_TAG', payload: { tagId: currentFilterTagId } },
        handleGenerateReportResponse // Callback for the response.
    );
}

/**
 * Handles the response from the background script after a PDF report generation request.
 * Re-enables the "Generate Report" button and shows a success or error message.
 *
 * @param {object} response - The response object from the background script.
 * Expected structure: `{ success: boolean, filename?: string, error?: string }`.
 */
function handleGenerateReportResponse(response) {
    if (generateReportBtn) {
        generateReportBtn.disabled = false; // Re-enable the button.
        updateGenerateReportButtonVisibility(); // Reset text based on current filter.
    }

    if (response && response.success) {
        console.log("WebInsight Panel: PDF report generated successfully. Filename:", response.filename);
        showStatus(`PDF report generated: ${response.filename}`, "success", 5000); // Auto-clear after 5s.
    } else {
        const errorMsg = response?.error || "Unknown error during PDF report generation.";
        console.error("WebInsight Panel: PDF report generation failed:", errorMsg);
        showStatus(`Error generating PDF report: ${errorMsg}`, "error", false); // Persistent error.
    }
}



/**
 * Handles the response from the background script after requesting key points generation.
 * If successful, displays the generated key points and source information.
 * Otherwise, shows an error message. Re-enables the "Get Key Points" button.
 *
 * @param {object} response - The response object from the background script.
 * Expected structure: `{ success: boolean, newId?: number, keyPoints?: string, sourceInfo?: string, error?: string }`.
 */
function handleKeyPointsResponse(response) {
     if (getKeyPointsBtn) {
         getKeyPointsBtn.disabled = false; // Re-enable the button.
         updateKeyPointsButtonVisibility(); // Reset text/title.
     }

    if (response && response.success) {
        console.log(`WebInsight Panel: Key points generated and saved (New Item ID: ${response.newId}). Source: ${response.sourceInfo}`);
        showStatus(`Key points generated and saved (ID: ${response.newId}). ${response.sourceInfo || ''}`, "success", 5000);

        // Display the received key points in the dedicated result area.
        displayKeyPointsResult(response.keyPoints, response.sourceInfo);
        // The main content list is NOT reloaded here to keep the key points visible above it.
        // If the new key points item itself needs to appear in the list immediately,
        // `loadSavedContent(currentFilterTagId)` would need to be called, but that might
        // hide the key points result if it scrolls out of view.
    } else {
        const errorMsg = response?.error || "Unknown error during key points generation.";
        console.error("WebInsight Panel: Key points generation failed:", errorMsg);
        showStatus(`Error generating key points: ${errorMsg}`, "error", false); // Show persistent error.
        hideKeyPointsResultArea(); // Ensure result area is hidden on failure.
    }
}

/**
 * Populates the key points result display area with the provided text and source information.
 * Makes the display area visible.
 *
 * @param {string} keyPointsText - The main text of the key points.
 * @param {string} sourceInfoText - Additional information about the source of the key points.
 */
function displayKeyPointsResult(keyPointsText, sourceInfoText) {
    if (!keyPointsResultDisplayArea) {
        console.error("WebInsight Panel: Key points result display area (keyPointsResultDisplay) not found.");
        return;
    }
    console.log("WebInsight Panel: Displaying key points result.");
    // Construct HTML, replacing newlines with <br> for display.
    keyPointsResultDisplayArea.innerHTML = `
        <h4>Key Points for Tag: ${currentFilterTagName || 'Selected'}</h4>
        <div class="key-points-content">${(keyPointsText || "No content generated.").replace(/\n/g, '<br>')}</div>
        <span class="source-info">${sourceInfoText || ''}</span>
    `;
    keyPointsResultDisplayArea.style.display = 'block'; // Make the area visible.
}

/**
 * Hides and clears the content of the key points result display area.
 */
function hideKeyPointsResultArea() {
    if (keyPointsResultDisplayArea) {
        keyPointsResultDisplayArea.style.display = 'none';
        keyPointsResultDisplayArea.innerHTML = ''; // Clear content.
    }
}


/**
 * Updates the visibility and text of the "Get Key Points" button
 * based on whether a tag filter is currently active.
 * Also calls `updateGenerateReportButtonVisibility`.
 */
function updateKeyPointsButtonVisibility() {
    if (!getKeyPointsBtn) return; // Button doesn't exist in DOM.

    if (currentFilterTagId !== null) { // A tag filter is active.
        getKeyPointsBtn.textContent = `Get Key Points for "${currentFilterTagName || 'Selected Tag'}"`;
        getKeyPointsBtn.style.display = 'inline-block';
        getKeyPointsBtn.disabled = false; // Ensure button is enabled.
    } else { // No tag filter active.
        getKeyPointsBtn.style.display = 'none';
    }
    // Key points and reports buttons often have similar visibility logic.
    updateGenerateReportButtonVisibility();
}

/**
 * Updates the visibility and text of the "Generate Report" button
 * based on whether a tag filter is currently active.
 */
function updateGenerateReportButtonVisibility() {
    if (!generateReportBtn) return; // Button doesn't exist.

    if (currentFilterTagId !== null) { // A tag filter is active.
        generateReportBtn.textContent = `Generate "${currentFilterTagName || 'Selected Tag'}" Report`;
        generateReportBtn.style.display = 'inline-block';
        generateReportBtn.disabled = false; // Ensure button is enabled.
    } else { // No tag filter active.
        generateReportBtn.style.display = 'none';
    }
}

// --- AI Interaction Logic ---

/**
 * Handles the "Initialize AI" button click.
 * Prompts the user for consent to download/enable the local AI model.
 * If consent is given, it sends a message to the background script to initialize the AI.
 * Updates UI elements (status indicator, buttons) based on the outcome.
 * @async
 */
async function handleInitializeAI() {
    if (aiLoading) return; // Prevent multiple initialization attempts.
    
    // Confirm user consent due to model download size (even if keyword-based is small, good practice).
    const userConsent = confirm(
        "Enable AI-powered tag suggestions?\n\n" +
        "This feature helps you find relevant existing tags for your content.\n" +
        "• Analyzes content locally in your browser.\n" +
        "• No data is sent to external servers for this suggestion feature.\n\n" +
        "The local AI system will be prepared for use. Continue?"
    );
    // Note: The original confirm message mentioned a 25MB model, which might be outdated
    // if the current local-ai.js is purely keyword-based. Adjusted for clarity.
    
    if (!userConsent) {
        console.log("WebInsight Panel: User declined AI initialization.");
        return;
    }
    
    aiLoading = true; // Set loading state.
    updateAIStatus("loading", "Initializing local AI system...");
    if (initializeAIBtn) {
        initializeAIBtn.disabled = true;
        initializeAIBtn.textContent = "Initializing...";
    }
    
    try {
        console.log("WebInsight Panel: Sending INITIALIZE_LOCAL_AI message to background script.");
        const response = await chrome.runtime.sendMessage({ type: "INITIALIZE_LOCAL_AI" });
        console.log("WebInsight Panel: Response from INITIALIZE_LOCAL_AI:", response);
        
        if (response && response.success) {
            aiInitialized = true; // Update global AI state.
            updateAIStatus("ready", "Local AI ready - Tag suggestions enabled.");
            showStatus("Local AI for tag suggestions enabled! You might want to generate embeddings for existing tags if applicable.", "success");
            updateAIButtons(); // Update button visibility.
        } else {
            throw new Error(response?.error || "Unknown error during AI initialization.");
        }
    } catch (error) {
        console.error("WebInsight Panel: Failed to initialize local AI:", error);
        updateAIStatus("error", "Local AI initialization failed.");
        showStatus(`Failed to initialize AI: ${error.message}`, "error");
    } finally {
        aiLoading = false; // Reset loading state.
        if (initializeAIBtn) {
            initializeAIBtn.disabled = false; // Re-enable button.
            // Text content will be updated by updateAIButtons if AI is initialized.
            if (!aiInitialized) initializeAIBtn.textContent = "Initialize AI";
        }
        updateAIButtons(); // Ensure buttons are in correct state.
    }
}

/**
 * Handles the "Generate Embeddings" button click.
 * Sends a message to the background script to generate and store embeddings
 * for all existing tags, which is useful for the local AI's tag suggestion feature.
 * Updates UI during and after the process.
 * @async
 */
async function handleGenerateEmbeddings() {
    if (!aiInitialized) {
        showStatus("Please initialize the Local AI system first before generating embeddings.", "error");
        return;
    }
    
    if (generateEmbeddingsBtn) {
        generateEmbeddingsBtn.disabled = true;
        generateEmbeddingsBtn.textContent = "Processing...";
    }
    updateAIStatus("processing", "Generating embeddings for existing tags... This may take some time.");
    
    try {
        console.log("WebInsight Panel: Sending GENERATE_EMBEDDINGS_FOR_TAGS message to background script.");
        const response = await chrome.runtime.sendMessage({ type: "GENERATE_EMBEDDINGS_FOR_TAGS" });
        console.log("WebInsight Panel: Response from GENERATE_EMBEDDINGS_FOR_TAGS:", response);
        
        if (response && response.success && response.payload) {
            const { processed, skipped, total } = response.payload;
            const message = `Embeddings processed: ${processed} new, ${skipped} skipped (already exist). Total tags: ${total}.`;
            updateAIStatus("ready", `Embeddings ready (${processed}/${total} new).`);
            showStatus(message, "success");
        } else {
            throw new Error(response?.error || "Unknown error during embedding generation.");
        }
    } catch (error) {
        console.error("WebInsight Panel: Failed to generate embeddings:", error);
        updateAIStatus("error", "Failed to generate embeddings."); // Keep 'error' status for visibility
        showStatus(`Failed to generate embeddings: ${error.message}`, "error");
    } finally {
        if (generateEmbeddingsBtn) {
            generateEmbeddingsBtn.disabled = false; // Re-enable button.
            generateEmbeddingsBtn.textContent = "Generate All Tag Embeddings";
        }
    }
}

/**
 * Updates the AI status indicator element in the panel.
 *
 * @param {string} status - The status type (e.g., "loading", "ready", "error", "disabled", "hidden").
 *                          This will be used as a class for styling.
 * @param {string} message - The message text to display in the indicator.
 */
function updateAIStatus(status, message) {
    if (!aiStatusIndicator) return; // Element not found.
    
    aiStatusIndicator.className = `ai-status ${status}`; // Apply class for styling.
    aiStatusIndicator.textContent = message;
    aiStatusIndicator.style.display = status === "hidden" ? "none" : "block"; // Control visibility.
}

/**
 * Updates the visibility and state of AI-related buttons based on `aiInitialized` status.
 * Hides "Initialize AI" button if AI is initialized, shows "Generate Embeddings" button.
 */
function updateAIButtons() {
    if (initializeAIBtn) {
        initializeAIBtn.style.display = aiInitialized ? "none" : "inline-block";
    }
    if (generateEmbeddingsBtn) {
        generateEmbeddingsBtn.style.display = aiInitialized ? "inline-block" : "none";
    }
}

/**
 * Handles adding a tag, either directly from user input or by first showing AI suggestions.
 * This function is typically called from event handlers within an item's detail view.
 *
 * @param {number} contentId - The ID of the content item to which the tag will be added.
 * @param {string|null} userInput - The tag name entered by the user. If `null` or empty,
 *                                  and AI is enabled, it will attempt to show suggestions.
 * @param {string} contentText - The text content of the item, used for generating AI tag suggestions.
 * @param {HTMLElement} tagInputEl - Direct reference to the tag input HTML element.
 * @param {HTMLElement} tagsListEl - Direct reference to the HTML element that lists tags for this item,
 *                                   used for refreshing the display after a tag is added.
 * @async
 */
async function enhancedAddTag(contentId, userInput, contentText, tagInputEl, tagsListEl) {
    // console.log(`WebInsight Panel: enhancedAddTag for contentId: ${contentId}, userInput: "${userInput}"`);
    
    if (!tagInputEl || !tagsListEl) {
        console.error("WebInsight Panel: Missing tagInputEl or tagsListEl in enhancedAddTag call.");
        return;
    }
    
    // If user provided direct input, add that tag.
    if (userInput && userInput.trim()) {
        const normalizedTag = userInput.trim(); // Basic trim, further normalization might occur in background.
        showStatus(`Adding tag "${normalizedTag}"...`, 'info', false);
        
        chrome.runtime.sendMessage(
            { type: 'ADD_TAG_TO_ITEM', payload: { contentId: contentId, tagName: normalizedTag } },
            (response) => {
                // Use the passed tagsListEl for targeted refresh.
                handleTagActionResponse(response, contentId, tagsListEl);
            }
        );
        return; // Exit after direct add.
    }
    
    // If no user input, AI is initialized, and content text is available, try to show suggestions.
    if (aiInitialized && contentText) {
        // console.log("WebInsight Panel: AI initialized, content available. Attempting to show tag suggestions.");
        await showTagSuggestions(contentId, contentText, tagInputEl, tagsListEl);
    } else if (aiInitialized && !contentText) {
        showStatus("No content available for AI suggestions. Please type a tag.", "info");
        // console.log("WebInsight Panel: AI initialized but no contentText for suggestions.");
    } else {
        // console.log("WebInsight Panel: AI not initialized or no content. Prompting user to type a tag.");
        showStatus("Enter a tag name. (Enable AI for suggestions).", "info");
    }
}

/**
 * Fetches and displays AI-generated tag suggestions below the tag input field.
 * Suggestions are presented as clickable buttons.
 *
 * @param {number} contentId - The ID of the content item for which suggestions are being made.
 * @param {string} contentText - The text content to analyze for suggestions.
 * @param {HTMLElement} inputElement - The tag input HTML element, used as an anchor for placing suggestions.
 * @param {HTMLElement} tagsListEl - The HTML element listing tags for this item, for refreshing after adding a suggested tag.
 * @async
 */
async function showTagSuggestions(contentId, contentText, inputElement, tagsListEl) {
    // console.log(`WebInsight Panel: Showing tag suggestions for contentId: ${contentId}`);
    try {
        // Create or find the container for suggestions.
        let suggestionsContainer = inputElement.parentElement.querySelector('.tag-suggestions');
        if (!suggestionsContainer) {
            suggestionsContainer = document.createElement('div');
            suggestionsContainer.className = 'tag-suggestions';
            // Insert after the input element or its wrapper.
            inputElement.parentElement.insertBefore(suggestionsContainer, inputElement.nextSibling);
        }
        suggestionsContainer.innerHTML = '<span class="suggestion-loading">🤖 Analyzing content for tag suggestions...</span>';
        // console.log("WebInsight Panel: Displaying AI suggestion loading indicator.");
        
        // Request suggestions from the background script.
        const response = await chrome.runtime.sendMessage({
            type: "SUGGEST_TAGS_FOR_CONTENT",
            payload: { content: contentText }
        });
        // console.log("WebInsight Panel: Response from SUGGEST_TAGS_FOR_CONTENT:", response);
        
        if (response && response.success && Array.isArray(response.payload) && response.payload.length > 0) {
            // Display clickable suggestion buttons.
            suggestionsContainer.innerHTML = `
                <span class="suggestion-label">🤖 Suggested tags:</span>
                ${response.payload.map(suggestion => 
                    `<button class="tag-suggestion" data-tag="${suggestion.name}" data-content-id="${contentId}" title="Similarity: ${(suggestion.similarity * 100).toFixed(0)}%">
                        ${suggestion.name} <span class="similarity-score">(${(suggestion.similarity * 100).toFixed(0)}%)</span>
                    </button>`
                ).join('')}
            `;
            // console.log(`WebInsight Panel: Displayed ${response.payload.length} AI tag suggestions.`);
            
            // Add click handlers for each suggestion button.
            suggestionsContainer.querySelectorAll('.tag-suggestion').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const tagName = btn.dataset.tag;
                    const targetContentId = parseInt(btn.dataset.contentId);
                    
                    showStatus(`Adding suggested tag "${tagName}"...`, 'info', false);
                    chrome.runtime.sendMessage(
                        { type: 'ADD_TAG_TO_ITEM', payload: { contentId: targetContentId, tagName: tagName } },
                        (addResponse) => {
                            handleTagActionResponse(addResponse, targetContentId, tagsListEl); // Refresh tag list.
                            suggestionsContainer.remove(); // Remove suggestions UI after selection.
                            // console.log("WebInsight Panel: Suggested tag added, suggestions UI removed.");
                        }
                    );
                });
            });
        } else {
            // No suggestions found or error in response.
            suggestionsContainer.innerHTML = `<span class="suggestion-empty">🤖 ${response?.message || 'No relevant tag suggestions found.'} Try typing a new tag.</span>`;
            // console.log("WebInsight Panel: No AI tag suggestions to display.");
            setTimeout(() => { // Auto-hide 'no suggestions' message.
                if (suggestionsContainer.parentElement) suggestionsContainer.remove();
            }, 3000);
        }
    } catch (error) {
        console.error("WebInsight Panel: Failed to get or display tag suggestions:", error);
        const suggestionsContainer = inputElement.parentElement.querySelector('.tag-suggestions');
        if (suggestionsContainer) {
            suggestionsContainer.innerHTML = '<span class="suggestion-error">❌ Error fetching tag suggestions.</span>';
        }
    }
}


/**
 * Checks the status of the local AI system when the panel loads.
 * Updates the UI (status indicator, buttons) accordingly.
 * @async
 */
async function checkAIStatus() {
    try {
        // console.log("WebInsight Panel: Checking local AI status on panel load.");
        const response = await chrome.runtime.sendMessage({ type: "GET_LOCAL_AI_STATUS" });
        // console.log("WebInsight Panel: Response from GET_LOCAL_AI_STATUS:", response);
        
        if (response && response.success && response.payload) {
            aiInitialized = response.payload.isReady;
            if (aiInitialized) {
                updateAIStatus("ready", "Local AI ready - Tag suggestions available.");
            } else {
                updateAIStatus("disabled", "Local AI disabled. Click 'Initialize AI' to enable tag suggestions.");
            }
            updateAIButtons(); // Set correct button visibility.
        } else {
             updateAIStatus("error", "Could not retrieve AI status.");
        }
    } catch (error) {
        console.error("WebInsight Panel: Error checking local AI status:", error);
        updateAIStatus("error", "Error checking AI status. See console.");
    }
}

// Log to confirm the panel script has loaded and initialized its primary event listeners and states.
console.log("WebInsight Panel script loaded and initialized (v8 - Simple Display with PDF support).");
